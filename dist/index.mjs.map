{"version":3,"sources":["../src/hooks/useApi.js"],"sourcesContent":["import {useState, useRef, useEffect, useCallback} from 'react';\n\n/**\n * A unified and flexible hook for handling API requests, local state, and global store synchronization.\n * @param {object} options - The configuration options for the hook.\n * @param {object} options.apiManager - A required instance of your API client.\n * @returns {object} The API state and methods.\n */\nexport const useApi = (options = {}) => {\n  // Ensure apiManager is provided\n  if (!options.apiManager) {\n    throw new Error('useApi requires an `apiManager` instance to be provided in the options.');\n  }\n\n  const settings = {\n    // --- Core ---\n    uri: '',\n    initialParams: {},\n    // --- Global Store ---\n    globalStore: null,\n    dataPath: '',\n    // --- Triggers ---\n    runOnMount: false,\n    alwaysRunOnMount: false,\n    runOnFocus: false,\n    runOnParamsChange: false,\n    refreshDependencies: [],\n    // --- Lifecycle & Validation ---\n    validateParams: () => true,\n    abortOnUnmount: true,\n    abortOnBlur: true,\n    // --- Data Transformation ---\n    filterParams: params => params,\n    filterResponse: data => data,\n    // --- Callbacks ---\n    onSubmit: () => {},\n    onSuccess: () => {},\n    onError: () => {},\n    onCompleted: () => {},\n    onRefresh: () => {},\n    // --- Pagination ---\n    pagination: null,\n    ...options,\n  };\n\n  // --- State Management ---\n  const [params, setParams] = useState(settings.initialParams);\n  const [error, setError] = useState(null);\n  const [errorMessage, setErrorMessage] = useState('');\n  const [loadingStates, setLoadingStates] = useState({\n    isInitialLoading: settings.runOnMount,\n    isRefreshing: false,\n    isLoadingMore: false,\n  });\n\n  // --- Refs ---\n  const apiRequest = useRef(settings.apiManager); // Use the injected manager\n  const lastFetchTimestamp = useRef(0);\n  const hasFetchedOnce = useRef(false);\n  const isMounted = useRef(true);\n  const debounceTimer = useRef(null);\n  const previousParams = useRef(params);\n\n  // --- Global Store Integration ---\n  const localResponseState = useState(settings.pagination ? {results: []} : null);\n  const hasGlobalStore = !!(settings.globalStore && settings.dataPath);\n  const response = hasGlobalStore ? settings.globalStore.use(settings.dataPath) : localResponseState[0];\n  const setResponse = hasGlobalStore\n    ? (value, ...args) => settings.globalStore.update(settings.dataPath, value, ...args)\n    : localResponseState[1];\n\n  useEffect(() => {\n    if (hasGlobalStore) {\n      const existingData = settings.globalStore.get(settings.dataPath);\n      if (existingData) {\n        setLoadingStates(prev => ({...prev, isInitialLoading: false}));\n      }\n    }\n  }, [hasGlobalStore, settings.globalStore, settings.dataPath]);\n\n  // --- Core Request Logic ---\n  const send = useCallback(\n    async (mode = 'initial', oneTimeParams = {}) => {\n      if (loadingStates.isInitialLoading || loadingStates.isRefreshing) {\n        if (mode !== 'pagination' || !settings.pagination) return;\n      }\n\n      setLoadingStates(prev => ({\n        ...prev,\n        isInitialLoading: mode === 'initial' && !hasFetchedOnce.current,\n        isRefreshing: mode === 'refresh',\n        isLoadingMore: mode === 'pagination',\n      }));\n      setError(null);\n      setErrorMessage('');\n\n      const currentParams = {...params, ...oneTimeParams};\n      if (mode === 'pagination' && settings.pagination) {\n        const page = (hasGlobalStore ? settings.globalStore.get(settings.dataPath)?.metadata?.page : response?.metadata?.page) || 0;\n        currentParams.page = page + 1;\n      }\n      const finalParams = settings.filterParams(currentParams);\n\n      if (!settings.validateParams(finalParams)) {\n        setLoadingStates({isInitialLoading: false, isRefreshing: false, isLoadingMore: false});\n        return;\n      }\n\n      await settings.onSubmit();\n      if (mode === 'refresh') await settings.onRefresh();\n\n      const apiResponse = await apiRequest.current.sendJson(settings.uri, finalParams);\n\n      if (!isMounted.current) return;\n\n      if (!apiResponse || !apiResponse.success) {\n        const err = apiResponse?.data || {message: 'An unknown error occurred.'};\n        setError(err);\n        setErrorMessage(err.message);\n        await settings.onError(err);\n      } else {\n        const filteredData = settings.filterResponse(apiResponse.data);\n        lastFetchTimestamp.current = Date.now();\n        hasFetchedOnce.current = true;\n\n        if (settings.pagination) {\n          const newResults = settings.pagination.getResults(apiResponse);\n          const newMetadata = settings.pagination.getMetadata(apiResponse);\n          const currentResponse = hasGlobalStore ? settings.globalStore.get(settings.dataPath) : response;\n          const mergedResults = settings.pagination.merge(currentResponse?.results, newResults, currentParams.page);\n          setResponse({results: mergedResults, metadata: newMetadata});\n        } else {\n          setResponse(filteredData);\n        }\n\n        await settings.onSuccess(filteredData, finalParams);\n      }\n\n      setLoadingStates({isInitialLoading: false, isRefreshing: false, isLoadingMore: false});\n      await settings.onCompleted();\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [params, settings.uri, hasGlobalStore, response],\n  );\n\n  // (The rest of the useEffects and callbacks remain the same as the previous version)\n\n  // --- Lifecycle Effects ---\n\n  // Handle runOnMount\n  useEffect(() => {\n    const shouldFetch = settings.runOnMount && (!hasFetchedOnce.current || settings.alwaysRunOnMount);\n    if (shouldFetch) {\n      const existingData = hasGlobalStore ? settings.globalStore.get(settings.dataPath) : null;\n      if (existingData && !settings.alwaysRunOnMount) {\n        return; // Data already exists, don't fetch\n      }\n      send('initial');\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [settings.runOnMount, settings.alwaysRunOnMount]);\n\n  // Handle component unmount\n  useEffect(() => {\n    isMounted.current = true;\n    return () => {\n      isMounted.current = false;\n      if (settings.abortOnUnmount) {\n        apiRequest.current.abort();\n      }\n    };\n  }, [settings.abortOnUnmount]);\n\n  // Handle refreshDependencies\n  useEffect(() => {\n    if (hasFetchedOnce.current) {\n      send('refresh');\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, settings.refreshDependencies);\n\n  // Handle runOnParamsChange (with debouncing)\n  useEffect(() => {\n    if (!settings.runOnParamsChange || !hasFetchedOnce.current) {\n      return;\n    }\n    if (JSON.stringify(params) === JSON.stringify(previousParams.current)) {\n      return;\n    }\n    previousParams.current = params;\n\n    if (typeof settings.runOnParamsChange === 'number') {\n      if (debounceTimer.current) clearTimeout(debounceTimer.current);\n      debounceTimer.current = setTimeout(() => {\n        send('refresh');\n      }, settings.runOnParamsChange);\n    } else {\n      send('refresh');\n    }\n  }, [params, settings.runOnParamsChange, send]);\n\n  // --- Public API ---\n\n  const refresh = useCallback(() => send('refresh'), [send]);\n  const loadMore = useCallback(() => {\n    const currentResponse = hasGlobalStore ? settings.globalStore.get(settings.dataPath) : response;\n    if (settings.pagination && currentResponse?.metadata?.hasMore) {\n      send('pagination');\n    }\n  }, [send, settings.pagination, response, hasGlobalStore, settings.globalStore, settings.dataPath]);\n\n  const updateParams = useCallback(updates => {\n    setParams(prev => ({...prev, ...updates}));\n  }, []);\n\n  const handleOnChange = useCallback(\n    key => newValue => {\n      setParams(prev => ({...prev, [key]: newValue}));\n    },\n    [],\n  );\n\n  const focus = useCallback(() => {\n    if (!settings.runOnFocus) return;\n    if (settings.runOnFocus === 'once' && hasFetchedOnce.current) return;\n    if (typeof settings.runOnFocus === 'number') {\n      const staleTime = settings.runOnFocus * 1000;\n      if (Date.now() - lastFetchTimestamp.current < staleTime) return;\n    }\n    refresh();\n  }, [settings.runOnFocus, refresh]);\n\n  const blur = useCallback(() => {\n    if (settings.abortOnBlur) {\n      apiRequest.current.abort();\n    }\n  }, [settings.abortOnBlur]);\n\n  return {\n    response,\n    error,\n    errorMessage,\n    params,\n    hasMore: (hasGlobalStore ? settings.globalStore.get(settings.dataPath)?.metadata?.hasMore : response?.metadata?.hasMore) ?? false,\n    isLoading: loadingStates.isInitialLoading || loadingStates.isRefreshing || loadingStates.isLoadingMore,\n    isInitialLoading: loadingStates.isInitialLoading,\n    isRefreshing: loadingStates.isRefreshing,\n    isLoadingMore: loadingStates.isLoadingMore,\n    setResponse,\n    setParams,\n    updateParams,\n    handleOnChange,\n    send,\n    refresh,\n    loadMore,\n    focus,\n    blur,\n  };\n};\n\nexport default useApi;\n"],"mappings":";AAAA,SAAQ,UAAU,QAAQ,WAAW,mBAAkB;AAQhD,IAAM,SAAS,CAAC,UAAU,CAAC,MAAM;AARxC;AAUE,MAAI,CAAC,QAAQ,YAAY;AACvB,UAAM,IAAI,MAAM,yEAAyE;AAAA,EAC3F;AAEA,QAAM,WAAW;AAAA;AAAA,IAEf,KAAK;AAAA,IACL,eAAe,CAAC;AAAA;AAAA,IAEhB,aAAa;AAAA,IACb,UAAU;AAAA;AAAA,IAEV,YAAY;AAAA,IACZ,kBAAkB;AAAA,IAClB,YAAY;AAAA,IACZ,mBAAmB;AAAA,IACnB,qBAAqB,CAAC;AAAA;AAAA,IAEtB,gBAAgB,MAAM;AAAA,IACtB,gBAAgB;AAAA,IAChB,aAAa;AAAA;AAAA,IAEb,cAAc,CAAAA,YAAUA;AAAA,IACxB,gBAAgB,UAAQ;AAAA;AAAA,IAExB,UAAU,MAAM;AAAA,IAAC;AAAA,IACjB,WAAW,MAAM;AAAA,IAAC;AAAA,IAClB,SAAS,MAAM;AAAA,IAAC;AAAA,IAChB,aAAa,MAAM;AAAA,IAAC;AAAA,IACpB,WAAW,MAAM;AAAA,IAAC;AAAA;AAAA,IAElB,YAAY;AAAA,IACZ,GAAG;AAAA,EACL;AAGA,QAAM,CAAC,QAAQ,SAAS,IAAI,SAAS,SAAS,aAAa;AAC3D,QAAM,CAAC,OAAO,QAAQ,IAAI,SAAS,IAAI;AACvC,QAAM,CAAC,cAAc,eAAe,IAAI,SAAS,EAAE;AACnD,QAAM,CAAC,eAAe,gBAAgB,IAAI,SAAS;AAAA,IACjD,kBAAkB,SAAS;AAAA,IAC3B,cAAc;AAAA,IACd,eAAe;AAAA,EACjB,CAAC;AAGD,QAAM,aAAa,OAAO,SAAS,UAAU;AAC7C,QAAM,qBAAqB,OAAO,CAAC;AACnC,QAAM,iBAAiB,OAAO,KAAK;AACnC,QAAM,YAAY,OAAO,IAAI;AAC7B,QAAM,gBAAgB,OAAO,IAAI;AACjC,QAAM,iBAAiB,OAAO,MAAM;AAGpC,QAAM,qBAAqB,SAAS,SAAS,aAAa,EAAC,SAAS,CAAC,EAAC,IAAI,IAAI;AAC9E,QAAM,iBAAiB,CAAC,EAAE,SAAS,eAAe,SAAS;AAC3D,QAAM,WAAW,iBAAiB,SAAS,YAAY,IAAI,SAAS,QAAQ,IAAI,mBAAmB,CAAC;AACpG,QAAM,cAAc,iBAChB,CAAC,UAAU,SAAS,SAAS,YAAY,OAAO,SAAS,UAAU,OAAO,GAAG,IAAI,IACjF,mBAAmB,CAAC;AAExB,YAAU,MAAM;AACd,QAAI,gBAAgB;AAClB,YAAM,eAAe,SAAS,YAAY,IAAI,SAAS,QAAQ;AAC/D,UAAI,cAAc;AAChB,yBAAiB,WAAS,EAAC,GAAG,MAAM,kBAAkB,MAAK,EAAE;AAAA,MAC/D;AAAA,IACF;AAAA,EACF,GAAG,CAAC,gBAAgB,SAAS,aAAa,SAAS,QAAQ,CAAC;AAG5D,QAAM,OAAO;AAAA,IACX,OAAO,OAAO,WAAW,gBAAgB,CAAC,MAAM;AAlFpD,UAAAC,KAAAC,KAAAC;AAmFM,UAAI,cAAc,oBAAoB,cAAc,cAAc;AAChE,YAAI,SAAS,gBAAgB,CAAC,SAAS,WAAY;AAAA,MACrD;AAEA,uBAAiB,WAAS;AAAA,QACxB,GAAG;AAAA,QACH,kBAAkB,SAAS,aAAa,CAAC,eAAe;AAAA,QACxD,cAAc,SAAS;AAAA,QACvB,eAAe,SAAS;AAAA,MAC1B,EAAE;AACF,eAAS,IAAI;AACb,sBAAgB,EAAE;AAElB,YAAM,gBAAgB,EAAC,GAAG,QAAQ,GAAG,cAAa;AAClD,UAAI,SAAS,gBAAgB,SAAS,YAAY;AAChD,cAAM,QAAQ,kBAAiBD,OAAAD,MAAA,SAAS,YAAY,IAAI,SAAS,QAAQ,MAA1C,gBAAAA,IAA6C,aAA7C,gBAAAC,IAAuD,QAAOC,MAAA,qCAAU,aAAV,gBAAAA,IAAoB,SAAS;AAC1H,sBAAc,OAAO,OAAO;AAAA,MAC9B;AACA,YAAM,cAAc,SAAS,aAAa,aAAa;AAEvD,UAAI,CAAC,SAAS,eAAe,WAAW,GAAG;AACzC,yBAAiB,EAAC,kBAAkB,OAAO,cAAc,OAAO,eAAe,MAAK,CAAC;AACrF;AAAA,MACF;AAEA,YAAM,SAAS,SAAS;AACxB,UAAI,SAAS,UAAW,OAAM,SAAS,UAAU;AAEjD,YAAM,cAAc,MAAM,WAAW,QAAQ,SAAS,SAAS,KAAK,WAAW;AAE/E,UAAI,CAAC,UAAU,QAAS;AAExB,UAAI,CAAC,eAAe,CAAC,YAAY,SAAS;AACxC,cAAM,OAAM,2CAAa,SAAQ,EAAC,SAAS,6BAA4B;AACvE,iBAAS,GAAG;AACZ,wBAAgB,IAAI,OAAO;AAC3B,cAAM,SAAS,QAAQ,GAAG;AAAA,MAC5B,OAAO;AACL,cAAM,eAAe,SAAS,eAAe,YAAY,IAAI;AAC7D,2BAAmB,UAAU,KAAK,IAAI;AACtC,uBAAe,UAAU;AAEzB,YAAI,SAAS,YAAY;AACvB,gBAAM,aAAa,SAAS,WAAW,WAAW,WAAW;AAC7D,gBAAM,cAAc,SAAS,WAAW,YAAY,WAAW;AAC/D,gBAAM,kBAAkB,iBAAiB,SAAS,YAAY,IAAI,SAAS,QAAQ,IAAI;AACvF,gBAAM,gBAAgB,SAAS,WAAW,MAAM,mDAAiB,SAAS,YAAY,cAAc,IAAI;AACxG,sBAAY,EAAC,SAAS,eAAe,UAAU,YAAW,CAAC;AAAA,QAC7D,OAAO;AACL,sBAAY,YAAY;AAAA,QAC1B;AAEA,cAAM,SAAS,UAAU,cAAc,WAAW;AAAA,MACpD;AAEA,uBAAiB,EAAC,kBAAkB,OAAO,cAAc,OAAO,eAAe,MAAK,CAAC;AACrF,YAAM,SAAS,YAAY;AAAA,IAC7B;AAAA;AAAA,IAEA,CAAC,QAAQ,SAAS,KAAK,gBAAgB,QAAQ;AAAA,EACjD;AAOA,YAAU,MAAM;AACd,UAAM,cAAc,SAAS,eAAe,CAAC,eAAe,WAAW,SAAS;AAChF,QAAI,aAAa;AACf,YAAM,eAAe,iBAAiB,SAAS,YAAY,IAAI,SAAS,QAAQ,IAAI;AACpF,UAAI,gBAAgB,CAAC,SAAS,kBAAkB;AAC9C;AAAA,MACF;AACA,WAAK,SAAS;AAAA,IAChB;AAAA,EAEF,GAAG,CAAC,SAAS,YAAY,SAAS,gBAAgB,CAAC;AAGnD,YAAU,MAAM;AACd,cAAU,UAAU;AACpB,WAAO,MAAM;AACX,gBAAU,UAAU;AACpB,UAAI,SAAS,gBAAgB;AAC3B,mBAAW,QAAQ,MAAM;AAAA,MAC3B;AAAA,IACF;AAAA,EACF,GAAG,CAAC,SAAS,cAAc,CAAC;AAG5B,YAAU,MAAM;AACd,QAAI,eAAe,SAAS;AAC1B,WAAK,SAAS;AAAA,IAChB;AAAA,EAEF,GAAG,SAAS,mBAAmB;AAG/B,YAAU,MAAM;AACd,QAAI,CAAC,SAAS,qBAAqB,CAAC,eAAe,SAAS;AAC1D;AAAA,IACF;AACA,QAAI,KAAK,UAAU,MAAM,MAAM,KAAK,UAAU,eAAe,OAAO,GAAG;AACrE;AAAA,IACF;AACA,mBAAe,UAAU;AAEzB,QAAI,OAAO,SAAS,sBAAsB,UAAU;AAClD,UAAI,cAAc,QAAS,cAAa,cAAc,OAAO;AAC7D,oBAAc,UAAU,WAAW,MAAM;AACvC,aAAK,SAAS;AAAA,MAChB,GAAG,SAAS,iBAAiB;AAAA,IAC/B,OAAO;AACL,WAAK,SAAS;AAAA,IAChB;AAAA,EACF,GAAG,CAAC,QAAQ,SAAS,mBAAmB,IAAI,CAAC;AAI7C,QAAM,UAAU,YAAY,MAAM,KAAK,SAAS,GAAG,CAAC,IAAI,CAAC;AACzD,QAAM,WAAW,YAAY,MAAM;AA5MrC,QAAAF;AA6MI,UAAM,kBAAkB,iBAAiB,SAAS,YAAY,IAAI,SAAS,QAAQ,IAAI;AACvF,QAAI,SAAS,gBAAcA,MAAA,mDAAiB,aAAjB,gBAAAA,IAA2B,UAAS;AAC7D,WAAK,YAAY;AAAA,IACnB;AAAA,EACF,GAAG,CAAC,MAAM,SAAS,YAAY,UAAU,gBAAgB,SAAS,aAAa,SAAS,QAAQ,CAAC;AAEjG,QAAM,eAAe,YAAY,aAAW;AAC1C,cAAU,WAAS,EAAC,GAAG,MAAM,GAAG,QAAO,EAAE;AAAA,EAC3C,GAAG,CAAC,CAAC;AAEL,QAAM,iBAAiB;AAAA,IACrB,SAAO,cAAY;AACjB,gBAAU,WAAS,EAAC,GAAG,MAAM,CAAC,GAAG,GAAG,SAAQ,EAAE;AAAA,IAChD;AAAA,IACA,CAAC;AAAA,EACH;AAEA,QAAM,QAAQ,YAAY,MAAM;AAC9B,QAAI,CAAC,SAAS,WAAY;AAC1B,QAAI,SAAS,eAAe,UAAU,eAAe,QAAS;AAC9D,QAAI,OAAO,SAAS,eAAe,UAAU;AAC3C,YAAM,YAAY,SAAS,aAAa;AACxC,UAAI,KAAK,IAAI,IAAI,mBAAmB,UAAU,UAAW;AAAA,IAC3D;AACA,YAAQ;AAAA,EACV,GAAG,CAAC,SAAS,YAAY,OAAO,CAAC;AAEjC,QAAM,OAAO,YAAY,MAAM;AAC7B,QAAI,SAAS,aAAa;AACxB,iBAAW,QAAQ,MAAM;AAAA,IAC3B;AAAA,EACF,GAAG,CAAC,SAAS,WAAW,CAAC;AAEzB,SAAO;AAAA,IACL;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA,UAAU,kBAAiB,oBAAS,YAAY,IAAI,SAAS,QAAQ,MAA1C,mBAA6C,aAA7C,mBAAuD,WAAU,0CAAU,aAAV,mBAAoB,YAAY;AAAA,IAC5H,WAAW,cAAc,oBAAoB,cAAc,gBAAgB,cAAc;AAAA,IACzF,kBAAkB,cAAc;AAAA,IAChC,cAAc,cAAc;AAAA,IAC5B,eAAe,cAAc;AAAA,IAC7B;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF;AACF;AAEA,IAAO,iBAAQ;","names":["params","_a","_b","_c"]}